name: CI/CD for Static Website

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main  

jobs:
  terraform:
    name: Deploy Infrastructure using Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1  

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Import S3 Bucket
        working-directory: ./terraform
        run: terraform import aws_s3_bucket.site_bucket new-timmy-8.serverless.my.id

      - name: Import CloudFront Distribution (if exists)
        working-directory: ./terraform
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[?contains(@, 'new-timmy-8.serverless.my.id')]].Id" --output text)
          echo "Distribution ID: $DISTRIBUTION_ID"
          if [ -n "$DISTRIBUTION_ID" ]; then
            terraform import aws_cloudfront_distribution.cdn $DISTRIBUTION_ID || echo "Failed to import existing CloudFront distribution."
          fi
        continue-on-error: true

      - name: Import Route 53 Record (if exists)
        working-directory: ./terraform
        run: |
          RECORD_EXISTS=$(aws route53 list-resource-record-sets --hosted-zone-id Z03102443KHY48QVUVSK9 --query "ResourceRecordSets[?Name=='new-timmy-8.serverless.my.id.'][Type]" --output text)
          if [ -n "$RECORD_EXISTS" ]; then
            terraform import aws_route53_record.subdomain Z03102443KHY48QVUVSK9_new-timmy-11.serverless.my.id_A || echo "Failed to import existing Route 53 record."
          fi
        continue-on-error: true

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

  deploy:
    name: Deploy to S3
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1  

      - name: Sync static website to S3
        run: |
          aws s3 sync static-website/ s3://new-timmy-8.serverless.my.id --delete

      - name: Invalidate CloudFront Cache
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items[?contains(@, 'new-timmy-8.serverless.my.id')]].Id" --output text)
          if [ -n "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          else
            echo "No CloudFront distribution found for invalidation."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
